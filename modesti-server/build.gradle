plugins {
    id 'org.springframework.boot' version '1.4.3.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.7"
    id "com.moowork.node" version "0.13"
}

dependencies {
    compile project(":modesti-api")

    compile "org.springframework.boot:spring-boot-starter-data-rest:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-security:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-mail:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:1.4.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-test:1.4.3.RELEASE"
    compile "org.springframework.security:spring-security-ldap:4.2.0.RELEASE"
    compile "org.activiti:activiti-spring-boot-starter-basic:5.19.0"
    compile "org.activiti:activiti-spring-boot-starter-jpa:5.19.0"
    compile "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"
    compile "org.apache.poi:poi:3.12-beta1"
    compile "org.apache.poi:poi-ooxml:3.12-beta1"
    compile "com.querydsl:querydsl-mongodb:4.1.4"
    compile "com.querydsl:querydsl-jpa:4.1.4"
    compile "cz.jirutka.rsql:rsql-parser:2.0.0"
    compile 'de.danielbechler:java-object-diff:0.94'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.4"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.projectlombok:lombok:1.16.12"
    compile "com.h2database:h2:1.4.193"
    compile "oracle:ojdbc:11.2.0.3"
    compile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5"
    compile "com.google.code.gson:gson:2.3.1"
    compile "ch.qos.logback:logback-classic:1.1.8"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "javax.interceptor:javax.interceptor-api:1.+"
    compile "org.subethamail:subethasmtp:3.1.7"
}

/**
 * Tell Spring Boot to make the JAR executable by appending a script to the JAR with
 * start/stop/restart/status commands
 */
springBoot {
    classifier = 'exec'
    executable = true
    layout = 'ZIP'
}

/**
 * Make a tarball containing the executable fat jar created by bootRepackage, and everything
 * in the src/dist directory
 */
task fatJarTar(type: Tar, dependsOn: 'bootRepackage') {
    compression Compression.GZIP
    extension "tar.gz"

    into('lib') {
        from libsDir
        include project.name + "-" + version + "-exec.jar"
    }
    from 'src/dist'
}



task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


/** Generate QueryDsl classes */
querydsl {
    library = "com.querydsl:querydsl-apt:4.1.4"
    querydslSourcesDir = "src/querydsl/java"
    springDataMongo = true
    jpa = true
}

/**
 * Make sure that the frontend gets built before we package the jar
 */
jar.dependsOn npm_run_build

node {}

/** Configure publishing to Artifactory */
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from components.java
//            pom.withXml {
//                def parentNode = asNode().appendNode('parent')
//                parentNode.appendNode('groupId', 'org.springframework.boot')
//                parentNode.appendNode('artifactId', 'spring-boot-starter-parent')
//                parentNode.appendNode('version', '1.4.2.RELEASE')
//            }
//            artifact(fatJarTar)  { classifier "dist" }
//            artifact(sourcesJar) { classifier "sources" }
//            artifact(javadocJar) { classifier "javadoc" }
//        }
//    }
//    repositories {
//        maven {
//            credentials {
//                username artifactoryUser
//                password artifactoryPassword
//            }
//
//            if (project.version.endsWith('-SNAPSHOT')) {
//                url "http://artifactory/beco-development-local"
//            } else {
//                url "http://artifactory/beco-release-local"
//            }
//        }
//    }
//}

release {
    git {
        requireBranch ='temp'
    }
}
