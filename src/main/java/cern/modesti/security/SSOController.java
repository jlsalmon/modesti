/*
 * Copyright 2014 Vincenzo De Notaris
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cern.modesti.security;

import org.opensaml.saml2.metadata.provider.MetadataProviderException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.saml.metadata.MetadataManager;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.Set;

@Controller
@RequestMapping("/saml")
public class SSOController {

  // Logger
  private static final Logger LOG = LoggerFactory.getLogger(SSOController.class);

  @Autowired
  private MetadataManager metadata;

  @RequestMapping(value = "/idpSelection", method = RequestMethod.GET)
  public String idpSelection(HttpServletRequest request) throws MetadataProviderException {
    if (!(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken)) {
      LOG.warn("The current user is already logged.");
      return "redirect:/landing";
    } else {
      if (isForwarded(request)) {
        String idp = metadata.getDefaultIDP();
//        Set<String> idps = metadata.getIDPEntityNames();
//        for (String idp : idps)
        LOG.info("Configured Identity Provider for SSO: " + idp);
//        model.addAttribute("idps", idps);
        return "redirect:saml/login?idp=" + idp;
      } else {
        LOG.warn("Direct accesses to '/idpSelection' route are not allowed");
        return "redirect:/";
      }
    }
  }

  /*
   * Checks if an HTTP request is forwarded from servlet.
   */
  private boolean isForwarded(HttpServletRequest request) {
    if (request.getAttribute("javax.servlet.forward.request_uri") == null) return false;
    else return true;
  }

}

// <?xml version="1.0" encoding="UTF-8"?><samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:unspecified" Destination="https://modesti-test.cern.ch:8443/saml/SSO" ID="_2cb50a2e-9285-4cff-895a-956c0cbed357" InResponseTo="a4jh103j9e74h3ai16e5cf7eb774117" IssueInstant="2015-05-05T15:51:11.314Z" Version="2.0"><Issuer xmlns="urn:oasis:names:tc:SAML:2.0:assertion">https://cern.ch/login</Issuer><samlp:Status><samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></samlp:Status><EncryptedAssertion xmlns="urn:oasis:names:tc:SAML:2.0:assertion"><xenc:EncryptedData xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" Type="http://www.w3.org/2001/04/xmlenc#Element"><xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"/><KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"><e:EncryptedKey xmlns:e="http://www.w3.org/2001/04/xmlenc#"><e:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/></e:EncryptionMethod><KeyInfo><ds:X509Data xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:X509IssuerSerial><ds:X509IssuerName>CN=CERN Grid Certification Authority, DC=cern, DC=ch</ds:X509IssuerName><ds:X509SerialNumber>113927968756732597970763</ds:X509SerialNumber></ds:X509IssuerSerial></ds:X509Data></KeyInfo><e:CipherData><e:CipherValue>OjGtcs9eqK3ZyipR981nYl88GO+sCQLXbxWTJQx4BqJwrFqWGPDsHhNKwzjRMC6P6zbphaWnf9ANE+xxmG1dleI8OsIEWsIFUV3+XGyjvTX9oeSWKyjcNDV3DDFUymO/b/rNBP1fL6hCz6n2gIt7hTxD4UR/9lR4HcJNM475JOqbCwjU4DEaH4kr9hqX9ASCN97GLQ9fDnARHE3nCxaO/KMp7Wi+UD24Az35VrSIIx20CvODBbIcVU3VTnTncyUn/Otp7x2h3fVhf3vOcR7F1RmwunwST9Bd0CGrq0gRYZP1KlO2MUjN2UqqRtjDpoBCQCfyLmHiiRQKwNGU+JMyHw==</e:CipherValue></e:CipherData></e:EncryptedKey></KeyInfo><xenc:CipherData><xenc:CipherValue></xenc:CipherValue></xenc:CipherData></xenc:EncryptedData></EncryptedAssertion></samlp:Response>;org.opensaml.common.SAMLException: Response doesn't have any valid assertion which would pass subject validation
